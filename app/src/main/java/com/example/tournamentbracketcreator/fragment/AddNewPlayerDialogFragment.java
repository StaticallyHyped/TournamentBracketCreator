package com.example.tournamentbracketcreator.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatDialogFragment;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;

import com.amazonaws.amplify.generated.graphql.AddTtPlayerMutation;
import com.amazonaws.amplify.generated.graphql.AllTtPlayersQuery;
import com.amazonaws.amplify.generated.graphql.ListTtPlayersQuery;
import com.amazonaws.mobileconnectors.appsync.AWSAppSyncClient;
import com.amazonaws.mobileconnectors.appsync.fetcher.AppSyncResponseFetchers;
import com.apollographql.apollo.GraphQLCall;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.exception.ApolloException;
import com.example.tournamentbracketcreator.R;
import com.example.tournamentbracketcreator.activity.StartTournActivity;
import com.example.tournamentbracketcreator.model.ClientFactory;
import com.google.android.material.textfield.TextInputEditText;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.annotation.Nonnull;

import static com.amazonaws.mobile.auth.core.internal.util.ThreadUtils.runOnUiThread;

/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link AddNewPlayerDialogFragment.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link AddNewPlayerDialogFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class AddNewPlayerDialogFragment extends AppCompatDialogFragment {
    public static final String TAG = "AddNewPlayerDialogFragment";

    private TextInputEditText name;
    public Button confirm, cancel;

    public interface DialogEvents {
        void onFinishEditDialog(String inputText);

    }
    private DialogEvents mDialogEvents;

    private String mTitle;
    private String mParam2;

    public AddNewPlayerDialogFragment() {
        // Required empty public constructor
    }

    public static AddNewPlayerDialogFragment newInstance(String title) {
        AddNewPlayerDialogFragment fragment = new AddNewPlayerDialogFragment();
        Bundle args = new Bundle();
        args.putString("title", title);
        //args.putString(DIALOG_MESSAGE, param2);
        fragment.setArguments(args);
        return fragment;
    }

    //From autogenerated Android onCreate method in class
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            Log.d(TAG, "onCreate: getArguments == null");
            mTitle = getArguments().getString("title");
            //mParam2 = getArguments().getString(DIALOG_MESSAGE);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_add_new_player_dialog, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        name = view.findViewById(R.id.dialog_inputname);
        confirm = view.findViewById(R.id.dialog_confirm);
        cancel = view.findViewById(R.id.dialog_cancel);
        String title = getArguments().getString("title", "Enter Name");
        getDialog().setTitle("Add New PlayerData");
        //a new twist (for me at least) on the text input soft keyboard
        setCancel();
        name.requestFocus();
        getDialog().getWindow().setSoftInputMode(
                WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
        sendBackResult();
    }

    public void sendBackResult(){
        confirm.setOnClickListener(v -> {
            Log.d(TAG, "sendBackResult: confirm button clicked");
            //TODO check if name is empty or duplicate
            DialogEvents listener = (DialogEvents) getTargetFragment();
                listener.onFinishEditDialog(name.getText().toString());
                Log.d(TAG, "onClick: name.toString " + name.getText().toString());
            dismiss();
            addPlayer();
            Intent intent = new Intent(getContext(), StartTournActivity.class);
            //intent.putExtra("inflate_poola", 1);
            startActivity(intent);
        });
    }

    private void setCancel(){
        cancel.setOnClickListener(v -> {
            Intent intent = new Intent(getContext(), StartTournActivity.class);
            startActivity(intent);
            dismiss();
        });
    }

    private void addPlayer(){
        Log.d(TAG, "addPlayer: starts");
        String nameString = name.getText().toString();
        String tempID = UUID.randomUUID().toString();
        AWSAppSyncClient awsAppSyncClient = ClientFactory.getInstance(getContext());

        AddTtPlayerMutation addTtPlayerMutation = AddTtPlayerMutation.builder()
                .name(nameString)
                .id(tempID)
                .build();
        awsAppSyncClient.mutate(addTtPlayerMutation).refetchQueries(ListTtPlayersQuery.builder()
        .build()).enqueue(addPlayerCallback);

        //TODO create new query to get wins[] and losses[] and insert those into the new player field as 0
        List<ListTtPlayersQuery.Item> items = new ArrayList<>();

        addPlayerOffline(new ListTtPlayersQuery.Item("TTPlayer", tempID, null,
                nameString, null));
        Log.d(TAG, "addPlayer: generated new TTPlayers");
        ConnectivityManager cm = (ConnectivityManager) getContext().getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        boolean isConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();

        if (!isConnected){
            Log.d(TAG, "addPlayer: killing connection, inside isConnected");
            //Kill the activity
            //getActivity().finish();
            //Kill the dialog fragment
            dismiss();
        }
    }
    private GraphQLCall.Callback<AddTtPlayerMutation.Data> addPlayerCallback = new GraphQLCall.Callback<AddTtPlayerMutation.Data>() {
        @Override
        public void onResponse(@Nonnull Response<AddTtPlayerMutation.Data> response) {
            Log.d(TAG, "onResponse: starts");
            if (response.hasErrors()){
                runOnUiThread(() -> {
                    //TODO figure out why Toast isn't finding the correct context
                    //Toast.makeText(getContext(), "Could not save", Toast.LENGTH_SHORT).show();
                    //Kill the activity
                    //getActivity().finish();
                    //Kill the dialog fragment
                    dismiss();
                });
            } else {
                runOnUiThread(() -> {
                    //TODO figure out why Toast isn't finding the correct context
                    //Toast.makeText(getContext(), "Saved", Toast.LENGTH_SHORT).show();
                    Log.d(TAG, "run: Successfully saved");
                    Log.d(TAG, "onResponse: killing connection, inside onResponse");
                    //Kill the activity
                    //getActivity().finish();
                    //Kill the dialog fragment
                    dismiss();
                });
            }
        }

        @Override
        public void onFailure(@Nonnull ApolloException e) {
            Log.d(TAG, "onFailure: failed to make posts api call");
        }
    };

    private void addPlayerOffline(final ListTtPlayersQuery.Item pendingItem){
        Log.d(TAG, "addPlayerOffline: starts");
        final AWSAppSyncClient awsAppSyncClient = ClientFactory.getInstance(getContext());
        final ListTtPlayersQuery listTtPlayersQuery = ListTtPlayersQuery.builder().build();

        awsAppSyncClient.query(listTtPlayersQuery).responseFetcher(AppSyncResponseFetchers.CACHE_ONLY)
                .enqueue(new GraphQLCall.Callback<ListTtPlayersQuery.Data>() {
                    @Override
                    public void onResponse(@Nonnull Response<ListTtPlayersQuery.Data> response) {
                        List<ListTtPlayersQuery.Item> items = new ArrayList<>();
                        if (response.data() != null){
                            Log.d(TAG, "onResponse: not null");
                            items.addAll(response.data().listTTPlayers().items());
                        }
                        items.add(pendingItem);
                        ListTtPlayersQuery.Data data = new ListTtPlayersQuery.Data(new ListTtPlayersQuery
                                .ListTTPlayers("TTPlayerConnection", items, null));
                        awsAppSyncClient.getStore().write(listTtPlayersQuery, data).enqueue(null);
                    }

                    @Override
                    public void onFailure(@Nonnull ApolloException e) {
                        Log.d(TAG, "onFailure: Failed to update player query list");

                    }
                });
    }
    // TODO: Rename method, update argument and hook method into UI event
    /*public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }*/

    @Override
    public void onAttach(Context context) {
        Log.d(TAG, "onAttach: starts");
        super.onAttach(context);
        //mDialogEvents = (DialogEvents) context;
//        if (!(context instanceof DialogEvents)){
//            throw new ClassCastException(context.toString()
//                    + "need AppDialog.DialogEvents interface");
//        }
        //mDialogEvents = (DialogEvents) context;
    }
   /* @Override
    public void onDetach() {
        Log.d(TAG, "onDetach: starts");
        super.onDetach();
        //mDialogEvents = null;
    }

    @Override
    public void onCancel(DialogInterface dialog) {
        Log.d(TAG, "onCancel: starts");
        super.onCancel(dialog);
    }

    @Override
    public void onDismiss(DialogInterface dialog) {
        Log.d(TAG, "onDismiss: starts");
        super.onDismiss(dialog);
    }

    @Override
    public void onStop() {
        Log.d(TAG, "onStop: starts");
        super.onStop();
    }

    @Override
    public void onDestroyView() {
        Log.d(TAG, "onDestroyView: starts");
        super.onDestroyView();
    }*/
    //TODO implement the following methods to see if you can get the main fragment
    //TODO to not be destroyed when the dialogfragment is dimissed
    /*@Override
    public void onPause() {
        Log.d(TAG, "onPause: called");
        super.onPause();
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        Log.d(TAG, "onSaveInstanceState: called");
        super.onSaveInstanceState(outState);
    }

    @Override
    public void onStop() {
        Log.d(TAG, "onStop: called");
        super.onStop();
    }

    @Override
    public void onDestroyView() {
        Log.d(TAG, "onDestroyView: called");
        super.onDestroyView();
    }

    @Override
    public void onDestroy() {
        Log.d(TAG, "onDestroy: called");
        super.onDestroy();
    }*/
}
